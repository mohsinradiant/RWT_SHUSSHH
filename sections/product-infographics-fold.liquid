<style>
  .infinite-carousel {
    background-color: #faf3ff;
    padding-top: 50px;
    padding-bottom: 50px;
    font-size: 3rem;
    line-height: 2rem;
  }
  .infinite-carousel .page-width {
    position: relative;
    overflow: hidden;
  }
  .infinite-carousel .section-heading {
    margin-top: 0 !important;
  }
  #shopify-section-template--23829512061238__product_infographics_fold_7ecJwW {
    background-color: #faf3ff;
  }

  .carousel-container {
    display: flex;
    justify-content: center;
    width: 100%;
    position: relative;
    overflow: hidden;
  }

  .combos-carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
    gap: 4px;
  }

  .carousel-item {
    min-width: 33%;
    max-width: 33%;
  }

  .carousel-item img {
    width: 100%;
    border-radius: 15px;
  }

  .carousel-dots {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-top: 20px;
  }

  .dot {
    width: 5px;
    height: 5px;
    aspect-ratio: 1 / 1;
    border-radius: 50%;
    background-color: #cdcdcd;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease, background-color 0.3s ease;
    display: inline-block;
    padding: 0;
  }

  .dot.active {
    background-color: #d5b7e0;
  }

  .carousel-arrow {
    width: 40px;
    height: 40px;
    aspect-ratio: 1/1;
    position: absolute;
    top: 55%;
    transform: translateY(-50%);
    border: none;
    cursor: pointer;
    padding: 0;
    border-radius: 50%;
    transition: all 0.3s ease;
    background-color: transparent;
  }
  .carousel-arrow img {
    width: 100%;
    height: 100%;
  }
  .carousel-arrow:hover {
    scale: 1.2;
  }

  .carousel-arrow.left {
    left: 30px;
  }

  .carousel-arrow.right {
    right: 30px;
  }
  @media (max-width: 850px) {
    .carousel-item,
    .combos-carousel-track .card-wrapper {
      width: 200px;
      max-width: unset;
    }
    .carousel-container,
    .combos-carousel-track .card-wrapper {
      justify-content: start;
    }
  }
</style>
{% if product.metafields.content.combos_collection %}
  <div class="infinite-carousel">
    <div class="page-width">
      <h2 class="section-heading">{{ section.settings.section_heading }}</h2>
      <div class="carousel-container">
        <div class="combos-carousel-track">
          {% assign collection = product.metafields.content.combos_collection.value %}
          {% if collection and collection.products.size > 0 %}
            {% for product in collection.products %}
              <div class="carousel-item">
                {% render 'card-product',
                  card_product: product,
                  show_secondary_image: true,
                  lazy_load: true,
                  quick_add: 'standard',
                  section_id: section.id,
                  horizontal_quick_add: true,
                  show_rating: false,
                  media_aspect_ratio: 'square'
                %}
              </div>
            {% endfor %}
          {% else %}
            <p>No products found in the specified collection.</p>
          {% endif %}
        </div>
      </div>
      <div class="carousel-dots">
        {% if collection and collection.products.size > 0 %}
          {% for product in collection.products %}
            <button class="dot" data-index="{{ forloop.index0 }}"></button>
          {% endfor %}
        {% endif %}
      </div>
      <button class="carousel-arrow left">
        <img src="https://cdn.shopify.com/s/files/1/0767/6297/2470/files/Group_323.png?v=1738057124">
      </button>
      <button class="carousel-arrow right" style="transform: rotate(180deg);">
        <img src="https://cdn.shopify.com/s/files/1/0767/6297/2470/files/Group_323.png?v=1738057124">
      </button>
    </div>
  </div>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.combos-carousel-track');
    const items = Array.from(track.children);
    const dotsContainer = document.querySelector('.carousel-dots');
    const dots = Array.from(dotsContainer.children);
    const leftArrow = document.querySelector('.carousel-arrow.left');
    const rightArrow = document.querySelector('.carousel-arrow.right');

    let currentIndex = 0;
    const totalItems = items.length;

    // Ensure the track width is set correctly to fit all items
    const setTrackWidth = () => {
      const trackWidth = items[0].getBoundingClientRect().width * totalItems;
      track.style.width = `${trackWidth}px`;
    };

    // GSAP animation function to move to a specific index
    const moveToIndex = (index) => {
      currentIndex = index;
      gsap.to(track, {
        x: -items[0].getBoundingClientRect().width * currentIndex,
        duration: 0.5,
        ease: 'power2.out',
      });

      // Update active dot
      dots.forEach((dot, i) => {
        dot.classList.toggle('active', i === currentIndex);
      });
    };

    // Move to next item (looping)
    const moveToNext = () => {
      currentIndex = (currentIndex + 1) % totalItems;
      moveToIndex(currentIndex);
    };

    // Move to previous item (looping)
    const moveToPrevious = () => {
      currentIndex = (currentIndex - 1 + totalItems) % totalItems;
      moveToIndex(currentIndex);
    };

    // Handle left arrow click
    leftArrow.addEventListener('click', moveToPrevious);

    // Handle right arrow click
    rightArrow.addEventListener('click', moveToNext);

    // Handle dot click
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        moveToIndex(index);
      });
    });

    // Auto-slide every 5 seconds
    setInterval(moveToNext, 5000);

    // Initialize the carousel
    setTrackWidth(); // Set track width before initial move
    moveToIndex(currentIndex);
  });
</script>
<script>
  function initializeVariantDivs() {
    console.log('%c[initializeVariantDivs] Running...', 'color: green; font-weight: bold;');

    document.querySelectorAll('.variant-div').forEach((div, index) => {
      console.log(`%c[initializeVariantDivs] Processing .variant-div #${index}`, 'color: blue;');

      const newDiv = div.cloneNode(true); // Clone to remove old event listeners
      div.parentNode.replaceChild(newDiv, div); // Replace old div with new one

      const inputId = newDiv.getAttribute('data-input-id');
      const radioInput = document.getElementById(inputId);
      const colorNameElement = document.querySelector('.product-info-fold-variant-color-name span');

      if (!radioInput) {
        console.warn(`[initializeVariantDivs] No radio input found for div #${index}`);
        return;
      }

      console.log(`[initializeVariantDivs] Associated input ID: ${inputId}, Value: ${radioInput.value}`);

      const value = radioInput.value.trim().toLowerCase();
      if (value.includes('ml')) {
        newDiv.classList.add('size-div');
        newDiv.textContent = radioInput.value;
      } else {
        newDiv.classList.remove('size-div');
        newDiv.textContent = '.';
      }

      newDiv.addEventListener('click', () => {
        console.log(`%c[Click] Variant Div Clicked: ${radioInput.value}`, 'color: purple; font-weight: bold;');

        // Deselect other variants
        document.querySelectorAll('.variant-div').forEach((item) => {
          item.classList.remove('selected', 'size-div');
          item.textContent = '.';
        });

        // Check if the radioInput exists before checking it
        if (radioInput) {
          radioInput.checked = true;
          radioInput.dispatchEvent(new Event('change', { bubbles: true }));
          newDiv.classList.add('selected');

          if (colorNameElement) {
            colorNameElement.textContent = radioInput.value;
            console.log(`[Click] Updated color name to: ${radioInput.value}`);
          }

          if (radioInput.value.toLowerCase().includes('ml')) {
            newDiv.classList.add('size-div');
            newDiv.textContent = radioInput.value;
          }
        } else {
          console.warn(`[Click] Radio input for ${inputId} was not found.`);
        }
      });

      console.log(`%c[initializeVariantDivs] Event listener attached for div #${index}`, 'color: green;');
    });
  }

  function observeProductUpdates() {
    console.log('%c[observeProductUpdates] Setting up MutationObserver...', 'color: cyan; font-weight: bold;');

    const productContainer = document.querySelector('.product-form');

    if (!productContainer) {
      console.warn('[observeProductUpdates] Product container not found!');
      return;
    }

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          console.log(
            '%c[observeProductUpdates] Product container updated. Reinitializing scripts...',
            'color: red; font-weight: bold;'
          );
          initializeVariantDivs();
          updateCarousel();
        }
      });
    });

    observer.observe(productContainer, { childList: true, subtree: true });

    console.log('%c[observeProductUpdates] MutationObserver attached successfully.', 'color: cyan;');
  }

  document.addEventListener('DOMContentLoaded', () => {
    console.log('%c[DOMContentLoaded] Initializing scripts...', 'color: black; font-weight: bold;');
    initializeVariantDivs();
    updateCarousel();
    observeProductUpdates();

    document.querySelectorAll('input[name^="Color-1"]').forEach((input) => {
      input.addEventListener('change', updateCarousel);
    });
  });

  document.addEventListener('shopify:section:load', () => {
    console.log(
      '%c[shopify:section:load] Shopify section reloaded. Reinitializing scripts...',
      'color: magenta; font-weight: bold;'
    );
    initializeVariantDivs();
    updateCarousel();
    observeProductUpdates();
  });
</script>
{% schema %}
{
  "name": "Product Combos Fold",
  "settings": [
    {
      "type": "text",
      "id": "section_heading",
      "label": "Section Heading",
      "default": "Discover What’s Making Everyone Go Wild!"
    }
  ],
  "presets": [
    {
      "name": "Product Combos Fold"
    }
  ]
}
{% endschema %}
